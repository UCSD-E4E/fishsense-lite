@startuml Class Diagram

package "Single Lens Correction" {
    class UndistortRawProcessor {
        LensCalibration lens_calibration

        byte[] undistort_raw(byte[] image)
    }

    class RawProcessor {
        Image process_image(byte[] image)
    }

    class LensCalibration {
        float focal_x
        float focal_y
        
        float optical_center_x
        float optical_center_y

        float skew

        float[5] distortion_coefficients
    }

    class LensCalibrator {
        LensCalibration calibrate(Image[] images)
    }

    class CheckerboardPose {
        float[3][3] rotation
        float[3] translation
    }

    class Checkboard {
        float[2] find_corners(Image image)
        CheckerboardPose find_checkboard_pose(Image image)
    }
}

package "Laser Depth" {
    class LaserCalibration {
        float[3] laser_axis
        float[3] laser_origin
    }

    class LaserCalibrator {
        LaserCalibration calibrate_with_checkerboard(Image undistorted_images)
    }

    class LaserProcessor {
        LaserCalibration laser_calibration

        float[3] calculate_laser_3d(float[2] laser_image_coordinates)
        float[][][3] calculate_depth_map(float[2] laser_image_coordinates)
    }
}

package "Fish Analyzer" {
    class FishLengthCalculator {
        float[3] calculate_length(float[2] head_image_coord, float[2] tail_image_coord, float[][][3] depth_map)
    }
}

package "FishSense Lite Business Layer Handlers" {
    class CalibrationHandler {
        vector<float[3]> laser_locations
        LensCalibration lens_calibration

        LensCalibration calibrate_lens(string[] file_paths)
        void queue_laser_calibration_image(float[2] laser_location, Image image)
        LaserCalibration calibrate_laser()
    }

    class RawProcessHandler {
        Image process_image(string file_path, LensCalibration lens_calibration)
    }

    class CheckerboardHandler {
        float[3][3], float[3] find_checkerboard_pose(Image image, LensCalibration lens_calibration)
    }

    class FishAnalyzerHandler {
        float analyze_fish(float[][][3] image, float[2] laser_coord, LaserCalibration laser_calibration)
    }
}

@enduml