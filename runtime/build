#! /bin/bash

# Do we have a CPU config?
if [ -f .max-cpu ]; then
    MAX_CPU=`cat .max-cpu`
else
    threads_per_core=`lscpu | grep "Thread(s) per core:" | sed -E 's/Thread\(s\) per core:\s+//'`
    cores_per_thread=`lscpu | grep "Core(s) per socket:" | sed -E 's/Core\(s\) per socket:\s+//'`
    sockets=`lscpu | grep "Socket(s):" | sed -E 's/Socket\(s\):\s+//'`
    
    total_num_cpus=$((threads_per_core*cores_per_thread*sockets))

    echo "WARNING: Max CPU config missing. Computer has $total_num_cpus. Defaulting to 1."

    MAX_CPU=1
fi

# Do we have a GPU config?
if [ -f .max-gpu ]; then
    MAX_GPU=`cat .max-gpu`
else
    total_num_gpus=`nvidia-smi --query-gpu=name --format=csv,noheader | wc -l`

    echo "WARNING: Max GPU config missing. Computer has $total_num_gpus. Defaulting to 1."

    MAX_GPU=1
fi

image=ghcr.io/ucsd-e4e/fishsense

nvidia_detected=0
cuda_supported=0
cpu_only=1

# Detect if docker is present
which docker > /dev/null
if [ $? -ne 0 ]; then
    echo "Docker is not installed or not in your path.  Please install Docker and try again."
    exit $?
fi

# Check if user is in the docker group
if ! id -nG "$USER" | grep -qw "docker"; then
    echo $USER does not belong to the docker group.  Please correct this and try again.
    exit $?
fi

# Check for the presence of an NVIDIA GPU
which nvidia-smi > /dev/null
if [ $? -eq 0 ]; then
    nvidia_detected=1
fi

# Check to see if docker supports passing through the GPU
if docker info | grep -qw nvidia; then
    cuda_supported=1
    cpu_only=0

    image=$image:cuda
fi

# If we detected an NVIDIA GPU, but can't use it in docker, warn the user.
if [ $nvidia_detected -ne $cuda_supported ]; then
    echo "WARNING: NVIDIA GPU detected without CUDA docker support.  Install the nvidia-container-runtime to correct this."
fi

# Prepend the cpu_ to the directory name if we are still CPU only.
if [ $cpu_only -eq 1 ]; then
    image=c$image:cpu
fi

CUDA_GROUP_ID=`id -g`
if getent group cuda; then
    CUDA_GROUP_ID=`getent group groupname | cut -d: -f3`
fi

# We use the git hash of the main remote to ensure that we bump only when necessary.
git remote update
docker build --build-arg IMAGE=$image  --build-arg CUDA_GROUP_ID=$CUDA_GROUP_ID --build-arg UID=`id -u` --build-arg GID=`id -g` --build-arg BUMP=`git rev-parse HEAD` --build-arg MAX_CPU=$MAX_CPU --build-arg MAX_GPU=$MAX_GPU . --tag `whoami`/fishsense-lite
